{"name":"bpdiag","tagline":"a quick script to visualize blood pressure measurements","body":"# BP Diag\r\n\r\n## Parses Blood Preasure Statistics\r\n\r\n**BP Diag** parses blood pressure statistics from data files, generates some\r\nstatistics and prints them to *STDERR*. You can export the data (and the\r\ngathered statistics) to **JSON** (dump to *STDOUT*). And you can also generate\r\n**SVG** or **PNG** charts from it::\r\n\r\n    bpdiag [OPTIONS] [OUTPUT [OUTPUT OPTIONS]].. [PARSER [PARSER OPTIONS]] FILENAME..\r\n\r\nTo see a list of possible command line options run:\r\n\r\n    bpdiag.py --help\r\n\r\n\r\n## Examples\r\n\r\nLets say we got a file called `bloodpressure.txt` containing the following\r\nvalues in a simple format. This is a good job for our *default parser* (there\r\nare other **parsers**, but more on this later):\r\n\r\n    136/83/65, 132/82/70\r\n    144/82/86, 137/81/75, -,         143/80/68\r\n    131/82/60, 144/82/64, 136/79/67, 140/80/62\r\n    136/83/68, 138/80/99, -,         133/74/65\r\n    136/79/67, 131/76/64, 135/81/72, 136/75/61\r\n    127/79/72\r\n\r\nSo if we run **BP Diag** over the file like this:\r\n\r\n    bpdiag.py bloodpressure.txt\r\n\r\nWe got the following results:\r\n\r\n    Parsed 17 value(s)...\r\n    Statistics (min, max, avg):\r\n    :: SYS...: 127, 144, 136\r\n    :: DIA...:  74,  83,  79\r\n    :: PULSE.:  60,  99,  69\r\n\r\nWe can also dump the results to **JSON** with `--json` or generate a line\r\nchart from it with `--chart` (for more options see below).\r\n\r\n\r\n## Features\r\n\r\n### Modular Input: Parsers\r\n\r\n**Parsers** define how the input from the given files is transformed into\r\n*Measurements* instances containing the data for each parsed measurement.\r\n\r\n**BP Diag** comes with a couple of parsers, but it's easy to write your own if\r\nthey don't fit your needs (just take a look at the source documentation of\r\nthe module).\r\n\r\n#### Parser: Plaintext\r\n\r\nThe *plaintext parser* is good to grab values from simple text files, like\r\ncopied from a note taking app or whatever. It's for files that just store a\r\ncouple of *SYS*, *DIA* and *PULSE* values.\r\n\r\nFor each line the `--delimiter ` (default is `,`) is used to split multiple\r\nentries on the line. And `--separator ` (default: `/`) is used to split the\r\nentries into the *SYS*, *DIA* and *PULSE* values. Entries that just contain the\r\n`--skip` string (default: `-`) are skipped.\r\n\r\n##### Number of measurements per line\r\n\r\nPer default all values are gathered one after the other. But you can use the\r\n`--entries` option to set a fixed number of measurements per line.\r\n\r\nWhat this means is that only that much values are used per line (even if there\r\nare more) and if a line contains less than *entries* values, the remaining\r\nones are filled with `None` values. Also values that are the *skip* string\r\nare not ignored but stored as a `None` value too.\r\n\r\nThis can be helpful in cases where you have a given number of measurements per\r\nline and you want to keep them aligned even if sometimes a measurement is\r\nskipped / missing.\r\n\r\n    bpdiag.py --json --compact --entries 4 bloodpressure.txt\r\n\r\nWill result in the following JSON:\r\n\r\n```json\r\n[[136,83,65],[132,82,70],null,null,[144,82,86],[137,81,75],null,[143,80,68],[131,82,60],[144,82,64],[136,79,67],[140,80,62],[136,83,68],[138,80,99],null,[133,74,65],[136,79,67],[131,76,64],[135,81,72],[136,75,61],[127,79,72],null,null,null]\r\n```\r\n\r\n### Output\r\n\r\nAs we already seen, you will always get some statistics-output to *STDERR*.\r\nBut you can also export the gathered data to a number of formats:\r\n\r\n#### Export JSON\r\n\r\nThere are a couple of ways to do this, but always the JSON dump is written to\r\n*STDOUT*, so you can redirect the dump to a file.\r\n\r\nYou can dump the data as an array of *SYS*, *DIA*, *PULSE* arrays with the `--json`\r\noption. Or as an array of objects with the `--json-obj` option (this will\r\ninclude all attributes of the *Measurement* instances, not just *SYS*, *DIA*\r\nand *PULSE*). If you want the gathered statistics too, use `--json-stats`.\r\n\r\nThere are a couple of options to govern how the dump is formatted, see the\r\n`--help` output for info on that.\r\n\r\n#### Export Chart\r\n\r\nTo generate *SVG* charts, you need to have [PyGal][PyGal] installed (see below). Other\r\nthan that, just use the `--chart` option to have a chart called `bp.svg`\r\ngenerated in your current directory. There are more options to this, take a\r\nlook at the `--help` output.\r\n\r\nInstead of the interactive SVG charts you can use *PNG* as output format. Just\r\nuse the `--png` option along with `--chart`. You need a couple more\r\ndependencies for that though, take a look below.\r\n\r\n\r\n## Install\r\n\r\nYou can install **BP Diag** with [pip][pip] or from source.\r\n\r\n**Install with pip**\r\n\r\n[pip][pip] is \"*a tool for installing and managing Python packages*\". If you don't\r\nhave it installed, see the [pip install instructions][pip install instructions]:\r\n\r\n    pip install --user bpdiag\r\n\r\n**Install from source**\r\n\r\nYou can fetch the latest [sourceball][sourceball] from github and unpack it, or just clone\r\nthis repository: `git clone git://github.com/brutus/bpdiag`. If you\r\ngot the source, change into the directory and use `setup.py`:\r\n\r\n    python setup.py install\r\n\r\n### Dependencies\r\n\r\n[PyGal][PyGal] is used to generate the charts. If you want to generate charts,\r\nyou need to install it. With [pip][pip] it's as easy as this:\r\n\r\n    pip install --user pygal\r\n\r\nIf you want to export to PNG files, you need [CairoSVG][CairoSVG], [tinycss][tinycss] and\r\n[cssselect][cssselect] too. You can install them like this:\r\n\r\n    pip install --user CairoSVG tinycss cssselect\r\n\r\n\r\n## Bugs  and Contribution\r\n\r\n**BP Diag** is at home at: https://github.com/brutus/bpdiag/\r\n\r\nIf you want to run the test cases, see that you got [nose][nose] installed and run\r\n`nosetests` from the `bpdiag` directory (the one containing the module).\r\nIf you got **bpdiag** already installed, run them like this: `nosetest\r\ntest_bpdiag`.\r\n\r\nIf something fails, please get in touch.\r\n\r\nIf you find any bugs, issues or anything, please use the [issue tracker][issue tracker].\r\n\r\n\r\n[home]: https://github.com/brutus/bpdiag/\r\n[sourceball]: https://github.com/brutus/bpdiag/zipball/master\r\n[issue tracker]: https://github.com/brutus/bpdiag/issues\r\n[pip]: http://www.pip-installer.org/en/latest/index.html\r\n[pip install instructions]: http://www.pip-installer.org/en/latest/installing.html\r\n[nose]: https://nose.readthedocs.org/en/latest/\r\n[PyGal]: http://pygal.org/\r\n[CairoSVG]: http://cairosvg.org/\r\n[tinycss]: http://packages.python.org/tinycss/\r\n[cssselect]: http://packages.python.org/cssselect/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}